package teacherpkg;


import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;

import com.example.loginform.R;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.firestore.CollectionReference;
import com.google.firebase.firestore.DocumentReference;
import com.google.firebase.firestore.DocumentSnapshot;
import com.google.firebase.firestore.FirebaseFirestore;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

import administratorpkg.tester;

public class fragment_createaccount_classteacher extends Fragment {

    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    EditText fullname,enrollment,branch,email,mobileno,address,atuogenrated_password;
    Button updatebtn,createbtn;
    String selectedDate;
    FirebaseFirestore fstore;
    FirebaseAuth fAuth;

private String classteacherUID;



    private Button datePickerButton;
    private Button datePickerButton2;
    private DatePickerDialog datePickerDialog;


    public fragment_createaccount_classteacher() {
        // Required empty public constructor
    }

    public static fragment_createaccount_classteacher newInstance(String param1, String param2) {
        fragment_createaccount_classteacher fragment = new fragment_createaccount_classteacher();
        Bundle args = new Bundle();
        args.putString(ARG_PARAM1, param1);
        args.putString(ARG_PARAM2, param2);
        fragment.setArguments(args);
        return fragment;
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.fragment_createaccount_classteacher, container, false);
        initDatePicker();
        datePickerButton = view.findViewById(R.id.datepicker1);
        datePickerButton2 = view.findViewById(R.id.datepicker2);
//        datePickerButton.setText(getTodayDate());
//        datePickerButton2.setText(getTodayDate());
       fstore=FirebaseFirestore.getInstance();
         fAuth=FirebaseAuth.getInstance();
        datePickerButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openDatePicker(datePickerButton);
            }
        });
        datePickerButton2.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                openDatePicker(datePickerButton2);
            }
        });

        fullname=view.findViewById(R.id.studentfullname);
        enrollment=view.findViewById(R.id.student_enrollment_no);
        email=view.findViewById(R.id.email2);
        mobileno=view.findViewById(R.id.student_mobileno);
        branch=view.findViewById(R.id.student_branch);
        address=view.findViewById(R.id.Student_address);
        atuogenrated_password=view.findViewById(R.id.autogenerated_password);
        createbtn=view.findViewById(R.id.createbtn_student);
        classteacherUID=fAuth.getCurrentUser().getUid().toString();

        // Inflate the layout for this fragment

        createbtn.setOnClickListener(new View.OnClickListener() {

            int i=1;
            public void onClick(View v) {

                if (validateFields()) {
                    String message = "Values are: " +
                            fullname.getText().toString() + ", " +
                            enrollment.getText().toString() + ", " +
                            email.getText().toString() + ", " +
                            branch.getText().toString() + ", " +
                            mobileno.getText().toString() + ", " +
                            address.getText().toString();


                    String autopassword= tester.generatePassword(5).toString();
                    String username = getUsername(fullname.getText().toString());

                    fAuth.createUserWithEmailAndPassword(email.getText().toString(),autopassword).addOnSuccessListener(new OnSuccessListener<AuthResult>() {
                        @Override
                        public void onSuccess(AuthResult authResult) {

                            atuogenrated_password.setVisibility(View.VISIBLE);
                            atuogenrated_password.setText(autopassword);
                            FirebaseUser user=fAuth.getCurrentUser();
                            DocumentReference df=fstore.collection("classteachers")
                                    .document(classteacherUID)
                                    .collection("class_students")
                                    .document(fAuth.getCurrentUser().getUid().toString());
                            Map<String,Object> userInfo=new HashMap<>();
                            userInfo.put("Fullname",fullname.getText().toString());
                            userInfo.put("Enrollment",enrollment.getText().toString());
                            userInfo.put("Email",email.getText().toString());
                            userInfo.put("Branch",branch.getText().toString());
                            userInfo.put("Mobile no",mobileno.getText().toString());
                            userInfo.put("Address",address.getText().toString());
                            userInfo.put("DOB", datePickerButton.getText().toString()); // Set the selected date from datePickerButton
                            userInfo.put("AdmissionYear", datePickerButton2.getText().toString());// Set the selected date from datePickerButton2
                            userInfo.put("password",autopassword);
                            userInfo.put("isStudent",true);


                            df.set(userInfo).addOnSuccessListener(new OnSuccessListener<Void>() {
                                @Override
                                public void onSuccess(Void unused) {
                                    DocumentReference classteacherref=fstore.collection("classteachers").document(classteacherUID);
                                    classteacherref.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
                                        @Override
                                        public void onSuccess(DocumentSnapshot documentSnapshot) {
                                                DocumentReference cr=fstore.collection("subjects").document(documentSnapshot.getString("class year"));
                                                cr.get().addOnSuccessListener(new OnSuccessListener<DocumentSnapshot>() {
                                                    @Override
                                                    public void onSuccess(DocumentSnapshot documentSnapshot) {

                                                        while (i<=documentSnapshot.getLong("total")) {
                                                            String sub=documentSnapshot.getString("sub"+i);
                                                            DocumentReference dfr = fstore.collection("classteachers")
                                                                    .document(classteacherUID)
                                                                    .collection("class_students")
                                                                    .document(fAuth.getCurrentUser().getUid()).collection("attendance").document(sub);
                                                            Map<String, Object> userInfo = new HashMap<>();
                                                            userInfo.put("1stMonth", 0);
                                                            userInfo.put("2ndMonth", 0);
                                                            userInfo.put("3rdMonth", 0);
                                                            dfr.set(userInfo).addOnSuccessListener(new OnSuccessListener<Void>() {
                                                                @Override
                                                                public void onSuccess(Void unused) {

                                                                }
                                                            });
                                                            i++;
                                                        }
                                                        i=1;
                                                        Toast.makeText(getContext(), getEmailFromSharedPreferences()+" : "+getPasswordFromSharedPreferences(), Toast.LENGTH_SHORT).show();
                                                        fAuth.signOut();

                                                    }
                                                });
                                            fAuth.signInWithEmailAndPassword(getEmailFromSharedPreferences(),getPasswordFromSharedPreferences()).addOnSuccessListener(new OnSuccessListener<AuthResult>() {
                                                @Override
                                                public void onSuccess(AuthResult authResult) {
                                                    Toast.makeText(getContext(), "relogin", Toast.LENGTH_SHORT).show();
                                                }
                                            }).addOnFailureListener(new OnFailureListener() {
                                                @Override
                                                public void onFailure(@NonNull Exception e) {
                                                    Toast.makeText(getContext(), "failed relogin", Toast.LENGTH_SHORT).show();
                                                }
                                            });

                                        }
                                    });




                                }
                            });
                        }
                    }).addOnFailureListener(new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            Toast.makeText(getContext(), "Authentication failed: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                            Log.e("FirebaseAuth", "Authentication failed", e);

                        }
                    });



                }




            }

        });

        // Displaying all values in toast



        return view;
    }
    private boolean validateFields() {
        EditText[] fields = {fullname, email, enrollment, branch, mobileno, address};

        for (EditText field : fields) {
            if (TextUtils.isEmpty(field.getText().toString())) {
                field.setError("Fill this field");
                return false;
            }

            // Validate email format
            if (!isValidEmail(email.getText().toString())) {
                Toast.makeText(getContext(), "Please enter a valid email address", Toast.LENGTH_SHORT).show();
                return false;
            }
            // Add more specific validation logic if needed (e.g., enrollment validation)
        }

        return true;
    }
    private String getUsername(String fullName) {
        // Split the full name into parts
        String[] parts = fullName.split(" ");

        // Extract the first part as the username (assuming it's the first name)
        String username = parts[0];

        // If the first name is empty, return a default username or handle it based on your logic
        if (TextUtils.isEmpty(username)) {
            // Handle the case when the first name is empty
            return "defaultUsername";
        } else {
            return username;
        }
    }

    private String getTodayDate() {
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH) + 1;
        int day = calendar.get(Calendar.DAY_OF_MONTH);
        return makeDateString(day, month, year);
    }

    private void initDatePicker() {
        DatePickerDialog.OnDateSetListener dateSetListener = new DatePickerDialog.OnDateSetListener() {
            @Override
            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                month = month + 1;
                String date = makeDateString(dayOfMonth, month, year);
                datePickerButton.setText(date);
                datePickerButton2.setText(date);
            }
        };

        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int day = calendar.get(Calendar.DAY_OF_MONTH);

        datePickerDialog = new DatePickerDialog(getContext(), dateSetListener, year, month, day);
    }

    private String makeDateString(int day, int month, int year) {
        return getMonthFormat(month) + " " + day + " " + year;
    }

    private String getMonthFormat(int month) {
        switch (month) {
            case 1:
                return "JAN";
            case 2:
                return "FEB";
            case 3:
                return "MAR";
            case 4:
                return "APR";
            case 5:
                return "MAY";
            case 6:
                return "JUN";
            case 7:
                return "JUL";
            case 8:
                return "AUG";
            case 9:
                return "SEP";
            case 10:
                return "OCT";
            case 11:
                return "NOV";
            case 12:
                return "DEC";
            default:
                return "JAN";
        }
    }
    private boolean isValidEmail(CharSequence target) {
        return !TextUtils.isEmpty(target) && android.util.Patterns.EMAIL_ADDRESS.matcher(target).matches();
    }
    private void openDatePicker(final Button button) {


        datePickerDialog.setOnDateSetListener(new DatePickerDialog.OnDateSetListener() {
            @Override
            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                month = month + 1;
                String date = makeDateString(dayOfMonth, month, year);
                button.setText(date);
            }
        });

        datePickerDialog.show();
    }
    private String getEmailFromSharedPreferences() {
        SharedPreferences sharedPreferences = getContext().getSharedPreferences("CRED", Context.MODE_PRIVATE);
        return sharedPreferences.getString("email", "");
    }

    // Method to retrieve password from SharedPreferences
    private String getPasswordFromSharedPreferences() {
        SharedPreferences sharedPreferences = getContext().getSharedPreferences("CRED", Context.MODE_PRIVATE);
        return sharedPreferences.getString("password", "");
    }

}
